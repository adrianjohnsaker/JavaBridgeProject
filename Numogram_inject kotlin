import kotlin.reflect.KClass
import kotlin.reflect.full.declaredMemberProperties
import kotlin.reflect.full.memberProperties
import kotlin.reflect.jvm.isAccessible

class Amelia {
    var beliefStrength: Double = 0.5  // Default belief weight
    var numogramZone: String = "Neutral"
}

fun injectNumogramBelief(instance: Any, beliefName: String, newValue: Any) {
    val kClass: KClass<*> = instance::class
    val property = kClass.memberProperties.find { it.name == beliefName }

    property?.let {
        it.isAccessible = true
        val mutableProp = it as? kotlin.reflect.KMutableProperty1<Any, Any>
        mutableProp?.set(instance, newValue)
        println("Injected $beliefName = $newValue into ${instance::class.simpleName}")
    } ?: println("Property $beliefName not found")
}

fun main() {
    val amelia = Amelia()

    // Inject new belief strength dynamically
    injectNumogramBelief(amelia, "beliefStrength", 0.9)
    injectNumogramBelief(amelia, "numogramZone", "Zone-7")

    println("Updated Belief Strength: ${amelia.beliefStrength}")
    println("Updated Numogram Zone: ${amelia.numogramZone}")
}
